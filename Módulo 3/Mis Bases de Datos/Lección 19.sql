USE DB_MATRICULA_CLASE;

SELECT	ID_PROFESOR, NOMBRE_PROFESOR, PRIMER_APELLIDO_P, SEGUNDO_APELLIDO_P
FROM	PROFESORES

SELECT	ID_PROFESOR AS 'CÉDULA DE IDENTIDAD',
		NOMBRE_PROFESOR AS NOMBRE,
		PRIMER_APELLIDO_P AS APELLIDO1,
		SEGUNDO_APELLIDO_P AS APELLIDO2
FROM	PROFESORES;

-- O
-- Pero no es recomendable

SELECT	ID_PROFESOR 'CÉDULA DE IDENTIDAD',
		NOMBRE_PROFESOR NOMBRE,
		PRIMER_APELLIDO_P APELLIDO1,
		SEGUNDO_APELLIDO_P APELLIDO2
FROM	PROFESORES;

-- ********************* ALIAS A UNA OPERACIÓN
SELECT	CARNET, MONTO,
		FLOOR(MONTO * 0.13) AS IMPUESTO,
		FLOOR(MONTO + (MONTO * 0.13)) AS TOTAL 
FROM	MATRICULAS

-- ********************* COMBINAR VARIOS CAMPOS
SELECT	CARNET,
		NOMBRE_ESTUDIANTE +
		' ' +
		PRIMER_APELLIDO_E +
		' ' +
		SEGUNDO_APELLIDO_E AS NOMBRE_COMPLETO
FROM	ESTUDIANTES

-- ********************* AGREGAR UNA CONSTANTE A UNA CONSULTA
SELECT	ID_PROFESOR AS IDENTIFICACION,
		NOMBRE_PROFESOR AS NOMBRE,
		PRIMER_APELLIDO_P AS APELLIDO1,
		SEGUNDO_APELLIDO_P AS APELLIDO2,
		'Costarricense' AS NACIONALIDAD, -- COSNTANTE
		55000 AS BONO -- CONSTANTE
FROM	PROFESORES;

-- UNION DE DATOS *FORMA NO CORRECTA*
SELECT * FROM PROFESORES
UNION
SELECT * FROM PROFESORES_CANDIDATOS;

-- *FORMA CORREXTA*
SELECT	ID_PROFESOR, NOMBRE_PROFESOR, PRIMER_APELLIDO_P, SEGUNDO_APELLIDO_P
FROM	PROFESORES

UNION

SELECT	ID, NOMBRE, APELLIDO1, APELLIDO2
FROM	PROFESORES_CANDIDATOS;

-- *CON ORDER BY*
SELECT	ID_PROFESOR, NOMBRE_PROFESOR, PRIMER_APELLIDO_P, SEGUNDO_APELLIDO_P
FROM	PROFESORES

UNION

SELECT	ID, NOMBRE, APELLIDO1, APELLIDO2
FROM	PROFESORES_CANDIDATOS

ORDER BY NOMBRE_PROFESOR;

-- *UNION ALL*
SELECT	ID_PROFESOR, NOMBRE_PROFESOR, PRIMER_APELLIDO_P, SEGUNDO_APELLIDO_P
FROM	PROFESORES

UNION ALL

SELECT	ID, NOMBRE, APELLIDO1, APELLIDO2
FROM	PROFESORES_CANDIDATOS

ORDER BY NOMBRE_PROFESOR;

-- *CON CONDICIONES*
SELECT	ID_PROFESOR, NOMBRE_PROFESOR, PRIMER_APELLIDO_P, SEGUNDO_APELLIDO_P
FROM	PROFESORES
WHERE	PRIMER_APELLIDO_P LIKE 'C%'

UNION

SELECT	ID, NOMBRE, APELLIDO1, APELLIDO2
FROM	PROFESORES_CANDIDATOS
WHERE	APELLIDO1 LIKE 'R%'

ORDER BY NOMBRE_PROFESOR;

-- *MÁS DE UNA UNIÓN*
SELECT NOMBRE_CARRERA FROM CARRERAS
UNION
SELECT NOMBRE_MATERIA FROM MATERIAS
UNION
SELECT NOMBRE_PROFESOR FROM PROFESORES
UNION
SELECT NOMBRE_ESTUDIANTE FROM ESTUDIANTES

-- NO FUNCIONA POQUE NO TIENE LOS MISMOS CAMPOS
SELECT	COD_PROFESOR,
		ID_PROFESOR,
		NOMBRE_PROFESOR
FROM	PROFESORES

UNION

SELECT	ID,
		NOMBRE
FROM	PROFESORES_CANDIDATOS

-- FORMA QUE SI FUNCIONA
SELECT	COD_PROFESOR,
		ID_PROFESOR,
		NOMBRE_PROFESOR
FROM	PROFESORES

UNION

SELECT	888,
		ID,
		NOMBRE
FROM	PROFESORES_CANDIDATOS;

-- **********************************************************

SELECT * FROM CARRERAS;
SELECT * FROM ESTUDIANTES;
SELECT * FROM HORARIOS;
SELECT * FROM MATERIAS;
SELECT * FROM MATRICULAS;
SELECT * FROM PROFESORES;

-- NOMBRE DE TODOS LOS PROFESORES Y ESTUDIANTES CON ALIAS Y CAMPOS CONSTANTES
SELECT	'Profe' AS OCUPACION,
		P.NOMBRE_PROFESOR AS NOMBRE,
		P.PRIMER_APELLIDO_P + ' ' + P.SEGUNDO_APELLIDO_P AS APELLIDOS,
		'Costarricense' AS NACIONALIDAD,
		P.TELEFONO_PROFESOR AS TELEFONO,
		P.CORREO_PROFESOR AS CORREO,
		NULL AS INGRESO,
		'RET' AS ESTADO
FROM	PROFESORES P

UNION

SELECT	'Estudiante',
		E.NOMBRE_ESTUDIANTE,
		E.PRIMER_APELLIDO_E + ' ' + E.SEGUNDO_APELLIDO_E,
		'Estadounidense',
		E.TELEFONO_ESTUDIANTE,
		E.CORREO_ESTUDIANTE,
		E.FECHA_INGRESO,
		E.ESTADO_ESTUDIANTE
FROM	ESTUDIANTES E

ORDER BY NOMBRE;

-- FUNCIONES AGREGADAS
SELECT	NOMBRE_ESTUDIANTE
FROM	ESTUDIANTES;

-- CANTIDAD DE ESTUDIANTES
SELECT	COUNT(*) AS CANTIDAD
FROM	ESTUDIANTES;

SELECT MONTO FROM MATRICULAS;

-- PROMEDIO DE MONTOS EN MATRICULAS
SELECT	AVG(MONTO)
FROM	MATRICULAS;

-- MONTO MAYOR EN MATRICULAS
SELECT	MAX(MONTO)
FROM	MATRICULAS;

-- MONTO MINIMO EN MATRICULAS
SELECT	MIN(MONTO)
FROM	MATRICULAS;

-- SUMA DE TODOS LOS MONTOS EN MATRICULAS
SELECT	SUM(MONTO)
FROM	MATRICULAS;

-- *************************

SELECT	NOMBRE_ESTUDIANTE, FECHA, MONTO

FROM	MATRICULAS M INNER JOIN ESTUDIANTES E
			ON M.CARNET = E.CARNET

WHERE	MONTO >
		(SELECT AVG(MONTO) FROM MATRICULAS);

-- **************************
SELECT	NOMBRE_ESTUDIANTE,
	CONVERT(varchar(10), FECHA, 103) AS 'Días de matrícula',
		MONTO

FROM	MATRICULAS M INNER JOIN ESTUDIANTES E
		ON M.CARNET = E.CARNET

WHERE MONTO > (SELECT AVG(MONTO) FROM MATRICULAS);

-- **************************
SELECT	NOMBRE_ESTUDIANTE, MA.COD_MATERIA_ABIERTA AS MATERIA,
		COSTO
FROM	DETALLE_MATRICULAS DM INNER JOIN MATERIAS_ABIERTAS MA
			ON DM.COD_MATERIA_ABIERTA = MA.COD_MATERIA_ABIERTA

		INNER JOIN MATRICULAS
			ON DM.NUM_RECIBO = MATRICULAS.NUM_RECIBO

		INNER JOIN ESTUDIANTES E
			ON MATRICULAS.CARNET = E.CARNET

WHERE MATRICULAS.CARNET = 'INA209';

-- *GROUP BY*
SELECT	NOMBRE_ESTUDIANTE, SUM(COSTO) AS 'TOTAL A PAGAR'
FROM	DETALLE_MATRICULAS DM INNER JOIN MATERIAS_ABIERTAS MA
			ON DM.COD_MATERIA_ABIERTA = MA.COD_MATERIA_ABIERTA

		INNER JOIN MATRICULAS
			ON DM.NUM_RECIBO = MATRICULAS.NUM_RECIBO

		INNER JOIN ESTUDIANTES E
			ON MATRICULAS.CARNET = E.CARNET

WHERE MATRICULAS.CARNET = 'INA209'

GROUP BY NOMBRE_ESTUDIANTE;

-- CONTAR LA CANTIDAD DE CARNET DIFERENTES EN MATRICULAS
SELECT COUNT(DISTINCT CARNET)
FROM MATRICULAS

-- ************************ 
SELECT	CONVERT(varchar(10), FECHA, 103) AS FECHA,
		SUM(MONTO) AS SUMA_MONTO
FROM	MATRICULAS
GROUP BY FECHA;

SELECT	CARNET,
		SUM(MONTO) AS SUMA_MONTO
FROM	MATRICULAS
GROUP BY CARNET;

-- *****************
SELECT	CARNET,
		FECHA,
		SUM(MONTO) AS SUMA_MONTO
FROM	MATRICULAS
GROUP BY CARNET, FECHA;

